

//Hey ! I know what you are thinking!
//Dont worry those functions are here for reference and never hurt nobody. 

inline char*ReadBinaryFile(const string&f)
{
	FILE*F = fopen(f.c_str(),"rb");
	if(!F)
	{
		printf("\nCan't find \"%s\".\n",f);
		exit(1);
	}
	unsigned n;
	fseek(F,0,SEEK_END);
	n = ftell(F);
	rewind(F);
	char*s = new char[n+1];
	fread(s,1,n,F);
	fclose(F);
	s[n]=0;
	return s;
}

string ReadTextFile(string f)
{
	const char *f_char = f.c_str();
	FILE*F = fopen(f_char,"rb");
	if(!F)
	{
		printf("\nCan't find \"%s\".\n",f);
		exit(1);
	}
	unsigned n;
	fseek(F,0,SEEK_END);
	n = ftell(F);
	rewind(F);
	char*s = new char[n+1];
	fread(s,1,n,F);
	fclose(F);
	s[n]=0;
	return s;
}

inline unsigned WriteBinaryFile(const char*f,const char*s, const int a, int bytes, const char*m="r+wb")
{
	FILE*F = fopen(f,m);
	fseek(F, a, SEEK_SET);
	cout<<"Patch in: "<<hex<<a<<endl;
	if(!F)
	{
		printf("\nCan't open \"%s\".\n",f);
		cin.get();
		exit(1);
	}
	unsigned n = fwrite(s,sizeof(char),bytes,F);
	fclose(F);
	cout<<"Number of instructions written: "<<n<<endl;
	return n;
}

inline vector<char*> Parse(char*s,const char*d=" ,\t\n\f\r")
{
	std::vector<char*>V;
	for(s=strtok(s,d); s; s=strtok(0,d))
	{
		V.push_back(s);
	}
	return V;
}

char* appendCharToCharArray(char* array, char a)
{
    size_t len = strlen(array);

    char* ret = new char[len+2];

    strcpy(ret, array);    
    ret[len] = a;
    ret[len+1] = '\0';

    return ret;
}

/* 	__asm__
	(
	"push ebp \n"
	"mov ebp,esp \n"
	"and esp,0xFFFFFFF8 \n"
	"mov eax,dword ptr [fs:0] \n"
	"push 0xFFFFFFFF \n"
	"push 0x00BB5873 \n"
	"push eax \n"
	"mov dword ptr [fs:0],esp \n"
	"mov eax,dword ptr [ebx] \n"
	"sub esp,0xF0 \n"
	"push esi \n"
	"mov esi,dword ptr [0x10B83A4] \n"
	"push edi \n"	
	"push eax \n"
	"je gg \n"	
	"push eax \n"	
	"push 2 \n"	
	"push esi \n"	
	"push 0x00E0A220 \n"	
	"push ebx \n"	
	"call 0x90C1D0 \n"	
	"add esp,0x14 \n"
	"gg: \n"	
	); */
	
	/* 	__asm__
	(
	"lea ecx,[esp+0x18] \n"
	"mov edx,ecx \n"
	"lea eax,[esp+0x30] \n"
	"mov dword ptr [esp+0x1C],ecx \n"
	"mov dword ptr [esp+0x18],edx \n"
	"mov ecx,eax \n"
	"lea edx,[esp+40] \n"
	"mov dword ptr [esp+0x20],eax \n"
	"mov dword ptr [esp+0x24],ecx \n"
	"mov dword ptr [esp+0x28],edx \n"
	"mov dword ptr [esp+0x2C],eax \n"
	"sub esp, 0x8 \n"
	"lea ecx,[esp+0x18] \n"
	"sub esp, 0x4 \n"
	"lea edx,[esp+0x74] \n"
	"mov dword ptr [esp+0x138],0 \n"
	"sub esp, 0x4 \n"
	"mov dword ptr [esp+0x20],ebx \n"
	"mov dword ptr [esp+0x24],1 \n"
	); */